{"version":3,"sources":["App.module.scss","helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","flattenObject","obj","prefix","Object","keys","reduce","acc","k","pre","length","assign","widgetSDK","require","App","stripeRef","React","createRef","state","isActive","stripeKey","initStripe","name","description","image","panelLabel","amount","currency","locale","email","shippingAddress","billingAddress","zipCode","alipay","bitcoin","allowRememberMe","errorMsgs","initialized","errors","success","ended","sendDataToADA","token","widgetIsActive","sendUserData","setState","init","event","type","metaData","stripe_key","panel_label","shipping_address","billing_address","zip_code","allow_remember_me","e","console","error","this","prevProps","prevState","buttonElement","current","getElementsByTagName","click","stripeParams","forEach","key","undefined","className","styles","wrapper","stripeWrapper","ref","stripeBtn","msg","errorsWrapper","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b7250ecd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__RCHjb\",\"stripeWrapper\":\"App_stripeWrapper__2xGp3\",\"stripeBtn\":\"App_stripeBtn__35gA4\",\"errorsWrapper\":\"App_errorsWrapper__3VnvC\",\"msg\":\"App_msg__jRWrr\",\"error\":\"App_error__1LS0k App_msg__jRWrr\",\"success\":\"App_success__3gLML App_msg__jRWrr\"};","export const flattenObject = (obj: any, prefix = ''): typeof obj => {\n  return Object.keys(obj).reduce((acc: any, k) => {\n    const pre = prefix.length ? prefix + '.' : '';\n\n    if (typeof obj[k] === 'object' && obj[k] !== null) {\n      Object.assign(acc, flattenObject(obj[k], pre + k));\n    } else {\n      acc[pre + k] = obj[k];\n    }\n    return acc;\n  }, {});\n};\n","import React from 'react';\nimport StripeCheckout, { Token } from 'react-stripe-checkout';\n\nimport { flattenObject } from './helpers';\n\nimport styles from './App.module.scss';\n\nconst AdaWidgetSDK = require('@ada-support/ada-widget-sdk');\nconst widgetSDK = new AdaWidgetSDK();\n\ninterface IState {\n  isActive: boolean;\n  stripeKey: string;\n  initStripe: boolean;\n  name?: string;\n  description?: string;\n  image?: string;\n  panelLabel?: string;\n  amount?: number;\n  currency?: string;\n  locale?: string;\n  email?: string;\n  shippingAddress?: boolean;\n  billingAddress?: boolean;\n  zipCode?: boolean;\n  alipay?: boolean;\n  bitcoin?: boolean;\n  allowRememberMe?: boolean;\n  errorMsgs: {\n    [key: string]: string;\n  };\n  errors: string[];\n  success: boolean;\n  ended: boolean;\n}\n\nclass App extends React.Component<unknown, IState> {\n  private stripeRef = React.createRef<HTMLDivElement>();\n\n  state = {\n    isActive: false,\n    stripeKey: '',\n    initStripe: false,\n    name: '',\n    description: '',\n    image: '',\n    panelLabel: '',\n    amount: 0,\n    currency: '',\n    locale: '',\n    email: '',\n    shippingAddress: false,\n    billingAddress: false,\n    zipCode: false,\n    alipay: false,\n    bitcoin: false,\n    allowRememberMe: false,\n    errorMsgs: {\n      initialized: 'ADA SDK could not be initialized',\n    },\n    errors: [],\n    success: false,\n    ended: false,\n  };\n\n  componentDidMount() {\n    try {\n      widgetSDK.init((event: any) => {\n        if (event.type === 'WIDGET_INITIALIZED') {\n          this.setState({\n            isActive: true,\n            stripeKey: event.metaData.stripe_key,\n            name: event.metaData.name,\n            description: event.metaData.description,\n            image: event.metaData.image,\n            panelLabel: event.metaData.panel_label,\n            amount: +event.metaData.amount || 0,\n            currency: event.metaData.currency,\n            locale: event.metaData.locale,\n            email: event.metaData.email,\n            shippingAddress: event.metaData.shipping_address === 'true',\n            billingAddress: event.metaData.billing_address === 'true',\n            zipCode: event.metaData.zip_code === 'true',\n            alipay: event.metaData.alipay === 'true',\n            bitcoin: event.metaData.bitcoin === 'true',\n            allowRememberMe: event.metaData.allow_remember_me === 'true',\n          });\n        } else {\n          this.setState({ ended: true });\n        }\n      });\n    } catch (e) {\n      console.error('ADA SDK could not be initialized');\n      this.setState({\n        isActive: false,\n        errors: ['initialized'],\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: unknown, prevState: IState) {\n    const { isActive, stripeKey } = this.state;\n\n    if (!widgetSDK.widgetIsActive && prevState.isActive) this.setState({ isActive: false });\n\n    if (isActive && !prevState.isActive && stripeKey && !prevState.stripeKey) {\n      this.setState({ initStripe: true }, () => {\n        const buttonElement: HTMLButtonElement | undefined = this.stripeRef.current?.getElementsByTagName('button')[0];\n        buttonElement && buttonElement.click();\n      });\n    }\n  }\n\n  sendDataToADA = (token: Token) => {\n    if (widgetSDK.widgetIsActive) {\n      widgetSDK.sendUserData(\n        {\n          ...flattenObject(token),\n        },\n        () => {\n          this.setState({ isActive: false, success: true });\n        },\n      );\n    }\n  };\n\n  render() {\n    const {\n      isActive,\n      stripeKey,\n      initStripe,\n      name,\n      description,\n      image,\n      panelLabel,\n      amount,\n      currency,\n      locale,\n      email,\n      shippingAddress,\n      billingAddress,\n      zipCode,\n      alipay,\n      bitcoin,\n      allowRememberMe,\n      errorMsgs,\n      errors,\n      success,\n      ended,\n    } = this.state;\n\n    const stripeParams: { [key: string]: string | number | boolean } = {\n      name,\n      description,\n      image,\n      panelLabel,\n      amount,\n      currency,\n      locale,\n      email,\n      shippingAddress,\n      billingAddress,\n      zipCode,\n      alipay,\n      bitcoin,\n      allowRememberMe,\n    };\n\n    Object.keys(stripeParams).forEach((key) => stripeParams[key] === undefined && delete stripeParams[key]);\n\n    return (\n      <div className={styles.wrapper}>\n        {isActive && (\n          <div className={styles.stripeWrapper} ref={this.stripeRef}>\n            {initStripe && (\n              <StripeCheckout token={this.sendDataToADA} stripeKey={stripeKey} {...stripeParams}>\n                <button className={styles.stripeBtn} />\n              </StripeCheckout>\n            )}\n          </div>\n        )}\n        {ended && <div className={styles.msg}>Checkout ended</div>}\n        <div className={styles.errorsWrapper}>\n          {errors.map((error) => (\n            <div key={error} className={styles.error}>\n              {errorMsgs[error]}\n            </div>\n          ))}\n        </div>\n        {success && <div className={styles.success}>Payment Successful</div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}